================================
Populating PDF's with Order Data
================================ 

Let's create a more useful pdf now, instead 
of just adding hello world to a pdf with 
.text(), let's actually add invoice data 
to a generated pdf file 


exports.getInvoice = (req, res, next) => {
  const orderId = req.params.orderId;
  Order.findById(orderId)
  .then(order => {
    if(!order){
        return next(new Error('No order found'));
    }
    if(order.user.userId.toString() !== req.user._id.toString()){
        // So if the above is true, if it's not equal then return
      return next(new Error('Unauthorized Access'))
    }
    const invoiceName = 'invoice-' + orderId + '.pdf';
    const invoicePath = path.join('data', 'invoices', invoiceName)
  
    // 
const pdfDoc = new PDFDocument();

res.setHeader('Content-Type', 'application/pdf');
res.setHeader('Content-Disposition', 'inline; filename="' + invoiceName + '"');
pdfDoc.pipe(fs.createWriteStream(invoicePath))

pdfDoc.pipe(res);

pdfDoc.fontSize(26).text('Invoice', {
  underline: true, 
});
pdfDoc.text('--------------------------')
// Now we can loop through the the order to 
// create the output, or since we already 
// have access to the order: 
let totalPrice = 0;
order.products.forEach(prod => {
  totalPrice += prod.quantity * prod.product.price;
  pdfDoc.fontSize(14)
  .text(prod.product.title
     + ' - ' +  prod.quantity 
     + ' x ' + '$' + prod.product.price);
});
pdfDoc.text('--------------------------')
pdfDoc.text(`Total Price: $${totalPrice}`)

pdfDoc.end();
 })
 .catch(err => {
  console.log(err)
 })
}
=======================
Protecting against CSRF
=======================

So we'll install a package called csurf

npm install --save csurf 

This package will allow us to generate a CSRF 
token, which is a string value we'll embed 
into our forms, for every request that 
changes the users state 

Like ordering something, or anything sensitive 

Then on the server, this package will check if 
that request does have a valid token

This means that the fake sites can send requests, 
but none of those requests will have a valid token

And guessing the token isn't feasible, as it's a 
random hashed value, and only one value is valid 

And a new token is generated for every page that's 
rendered

So how do we use these tokens? 

WE go inside of our app.js, we import the package 
with: 

const csrf = require('csurf')

then we use csrf by invoking it: 

const csrfProtection = csrf();

And with that we get the csrf protection middleware

Now we just need to use it as a middleware, so after 
we call app.use and pass in session:

app.use(
  session({
    secret: 'my secret',
    resave: false,
    saveUninitialized: false,
    store: store
  })
);

app.use(csrfProtection)

Then inside of shop.js: 

exports.getIndex = (req, res, next) => {
  Product.find()
    .then(products => {
      res.render('shop/index', {
        prods: products,
        pageTitle: 'Shop',
        path: '/',
        isAuthenticated: req.session.isLoggedIn,
        csrfToken: req.csrfToken()
      });
    })
    .catch(err => {
      console.log(err);
    });
};

we add that additional csrf token key, then we 
can use it inside of a view, like navigation.ejs

      <li class="main-header__item">
        <form action="/logout" method="post">
          <input type="hidden" name="_csrf" value="<%  csrfToken  %>" />
          <button type="submit">Logout</button>
        </form>
      </li>

      And it's important we add that name="_csrf", 
==============
LOGICAL ERRORS
==============

These logical errors can often be the 
trickiest to find, the app is not behaving 
in the manner it should, but there 
aren't any hints, no error messages, not 
an explcit IDE warning of any kind either

Let's look again at our old routes.js file: 

In the block where we parse our body

    return req.on('end', () => {
      const parsedBody = Buffer.concat(body).toString();
      const message = parsedBody.split('=')[1];
      fs.writeFile('message.txt', message, err => {
        res.statusCode = 302;
        res.setHeader('Location', '/');
        return res.end();
      });
    });
  }

  Let's change   const message = parsedBody.split('=')[1];

       to        const message = parsedBody.split('=')[0];

       Remember the [1] index is where the message the 
       user entered will be located, because we split 
       the key value pair, but now we're storing 
       index 0, the wrong element to store

But now if we input 'test' in the input field and enter,
look at message.txt, we don't see 'test' we see 
'message', this is because 'message' is always stored 
at index 0, we split message above with the parsedBody
but we're saving the key, not the value to our 
message.txt file now 

This is a logical error, there's no error message, 
but the app is not working the way it should, we 
simply made a human error in saving the incorrect 
index when we parsedBody

Obviously for this example, we know what we changed 
to cause this logical error, but let's say you 
worked on that code for hours, or maybe 
this is the first time you're working on 
this code and maybe you made a mistake similar 
to this, it can be challenging to correctly identify 

How can we make it easier to identify these logical 
errors? 

NODE.JS DEBUGGER

This debugger has a clean integration into 
VSCODE, from the main menu, select 'run' then 
'start debugging' 

And now we have a nice draggable debugger in 
in the VSCODE application, also notice nodemon,
nodemon displays: 

Debugger attached.
[nodemon] 2.0.22
[nodemon] to restart at any time, enter `rs`
[nodemon] watching path(s): *.*
[nodemon] watching extensions: js,mjs,json
[nodemon] starting `node app.js`
Debugger attached.
Some hard coded text here and here and here

What does 'debugger attached' mean? 

This is how we can 'look' into our code as it's 
running, but to do this we also need to set breakpoints 

Let's go back to routes.js and select the line:

const message = parsedBody.split('=')[1];

To the left of the line if you hover, you'll see 
a red dot, clicking this red dot will set a 
breakpoint on this line specifically

The code execution stops when it reached that 
breakpoint

Which is cool! We can now analyze the code in the exact 
moment it's running 

We can also hover over variables and see what's 
stored inside of them! 

If we hover over parsedBody: 

 const parsedBody = Buffer.concat(body).toString();

 We see: "message=test"

 And if we hover over the (body) in concat we see: 

 0:
Buffer(12) [109, 101, 115, 115, 97, 103, 101, 61, 116, 101, 115, 116, buffer: ArrayBuffer(852), byteLength: 12, byteOffset: 840, length: 12]
length:
1
[[Prototype]]:
Array(0)
[[Prototype]]:
Object

It's an array with a buffer that has a length of 12, 
it even has expansions and dropdowns to look all the 
way into the __proto__ chain, very cool